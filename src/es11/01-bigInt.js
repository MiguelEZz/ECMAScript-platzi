// L√≠mites num√©ricos en JavaScript

// üìè JavaScript tiene l√≠mites num√©ricos, un m√°ximo 
// Number.MAX_SAFE_INTEGER y un m√≠nimo Number.MIN_SAFE_INTEGER.
// Fuera de estos l√≠mites, los c√°lculos matem√°ticos pueden
// fallar y mostrar resultados err√≥neos. Con BigInt esto
// se resuelve.



const abigNumber = 443454288489848493n;
const anotherNUmber = BigInt(443454288489848493)

console.log(abigNumber);
console.log(anotherNUmber);

// output:
// 443454288489848493n
// 443454288489848493n

//ESTO SIRVE PARA EL MANEJO DE NUMEROS GRANDES.
//NO ES MUY USADO PERO SIRVE PARA QUE LAS OPERACIONES MATEMATICAS
//CON NUMEROS ENORMES RESULTEN  CORRECTAMENTE

//PARA EVITAR QUE SE CONFUNDAN CON OTRO TIPO DE DATOS

//TAMBIEN CONVIERTE LOS STRINGS DE NUMEROS GRANDES A 
//NUMBER

// La necesidad de BigInt() surge cuando los n√∫meros que
// se deben manipular son demasiado grandes para ser 
// representados con el tipo de datos de n√∫mero entero
// est√°ndar en el lenguaje, como int o long. Por ejemplo,
// si necesitas realizar c√°lculos con n√∫meros enteros 
// extremadamente grandes (por encima del l√≠mite que puede
// representar un n√∫mero entero est√°ndar), puedes usar 
// BigInt para evitar errores de desbordamiento y
// asegurar la precisi√≥n.

// const numeroMuyGrande = BigInt("1234567890123456789012345678901234567890");
// const otroNumeroMuyGrande = BigInt(98765432101234567890);
// const suma = numeroMuyGrande + otroNumeroMuyGrande;

// console.log(suma);